[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qmnn"
version = "1.0.0"
description = "Quantum Memory-Augmented Neural Networks"
readme = "README.md"
license = {text = "Apache-2.0"}
authors = [
    {name = "Bayram Eker", email = "info@neuraparse.com"},
    {name = "Neura Parse Research Team", email = "info@neuraparse.com"},
]
maintainers = [
    {name = "Neura Parse", email = "info@neuraparse.com"},
]
keywords = ["quantum", "machine-learning", "neural-networks", "qram", "quantum-computing"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
    "Natural Language :: English",
    "Environment :: GPU :: NVIDIA CUDA",
]
requires-python = ">=3.9"
dependencies = [
    # Core ML and Quantum Computing (2025 versions)
    "torch>=2.1.0",  # Latest PyTorch with improved quantum support
    "torchvision>=0.16.0",
    "numpy>=1.24.0",
    "qiskit>=1.0.0",  # Qiskit 1.0+ with stable API
    "qiskit-aer>=0.13.0",  # GPU-accelerated quantum simulation
    "qiskit-ibm-runtime>=0.20.0",  # IBM Quantum cloud access
    "pennylane>=0.35.0",  # Latest PennyLane with fault-tolerant features

    # Scientific Computing
    "scipy>=1.11.0",
    "matplotlib>=3.7.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",

    # 2025 Advanced Features
    "transformers>=4.35.0",  # For quantum transformer baselines
    "einops>=0.7.0",  # Tensor operations for quantum attention
    "tensorboard>=2.15.0",  # Advanced logging
    "wandb>=0.16.0",  # Experiment tracking
    "mlflow>=2.8.0",  # Updated MLflow

    # Federated Learning & Cryptography
    "cryptography>=41.0.0",  # Quantum-safe cryptography
    "pycryptodome>=3.19.0",  # Additional crypto primitives

    # Error Correction and Optimization
    "networkx>=3.2.0",  # Graph algorithms for surface codes
    "cvxpy>=1.4.0",  # Convex optimization for error correction
    "pymatching>=2.0.0",  # Minimum weight perfect matching

    # Utilities
    "tqdm>=4.66.0",
    "pyyaml>=6.0",
    "click>=8.1.0",
    "rich>=13.0.0",
    "typer>=0.9.0",  # Modern CLI framework
    "pydantic>=2.5.0",  # Data validation
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "nbsphinx>=0.8.0",
    "myst-parser>=0.18.0",
]
gpu = [
    "cupy-cuda12x>=11.0.0",
    "qiskit-aer-gpu>=0.12.0",
]
all = ["qmnn[dev,docs,gpu]"]

[project.urls]
Homepage = "https://github.com/neuraparse/QMANN"
Documentation = "https://qmnn.readthedocs.io"
Repository = "https://github.com/neuraparse/QMANN.git"
"Bug Tracker" = "https://github.com/neuraparse/QMANN/issues"
"arXiv Paper" = "https://arxiv.org/abs/2025.XXXXX"
"Zenodo DOI" = "https://doi.org/10.5281/zenodo.XXXXXXX"
"Organization" = "https://neuraparse.com"
"Contact" = "mailto:info@neuraparse.com"

[project.scripts]
qmnn = "qmnn.cli:main"
qmnn-train = "qmnn.training:main"
qmnn-benchmark = "qmnn.benchmarks:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
qmnn = ["data/*.yaml", "circuits/*.qasm", "configs/*.json"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | paper
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["qmnn"]
known_third_party = ["qiskit", "pennylane", "torch", "numpy", "scipy", "matplotlib"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests as requiring GPU",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/qmnn"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
